{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/eminecansuakgul/catboost?scriptVersionId=190440912\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"a4aee5e4","metadata":{"_cell_guid":"3a4a233f-52d5-446a-8562-89170d92e3b4","_uuid":"125332df-e4e6-4dab-ab6c-ab1066562fc5","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:10:52.82677Z","iopub.status.busy":"2024-07-30T12:10:52.826419Z","iopub.status.idle":"2024-07-30T12:11:06.463004Z","shell.execute_reply":"2024-07-30T12:11:06.461785Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":13.655717,"end_time":"2024-07-30T12:11:06.46543","exception":false,"start_time":"2024-07-30T12:10:52.809713","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting lofo-importance\r\n","  Downloading lofo_importance-0.3.4-py3-none-any.whl.metadata (6.6 kB)\r\n","Requirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (1.26.4)\r\n","Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (2.1.4)\r\n","Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (1.11.4)\r\n","Requirement already satisfied: scikit-learn>=0.20.3 in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (1.2.2)\r\n","Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (4.66.1)\r\n","Requirement already satisfied: lightgbm in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (4.2.0)\r\n","Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from lofo-importance) (3.2.1)\r\n","Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.3->lofo-importance) (1.4.0)\r\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.3->lofo-importance) (3.2.0)\r\n","Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->lofo-importance) (2.9.0.post0)\r\n","Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->lofo-importance) (2023.3.post1)\r\n","Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->lofo-importance) (2023.4)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->lofo-importance) (1.16.0)\r\n","Downloading lofo_importance-0.3.4-py3-none-any.whl (11 kB)\r\n","Installing collected packages: lofo-importance\r\n","Successfully installed lofo-importance-0.3.4\r\n"]}],"source":["!pip install lofo-importance"]},{"cell_type":"code","execution_count":2,"id":"9e3f4743","metadata":{"_cell_guid":"f02a8a57-e75d-45f3-983a-d5d9f977649c","_uuid":"c9a7b126-cbd7-46cc-abf9-19f71c043358","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:06.499048Z","iopub.status.busy":"2024-07-30T12:11:06.498267Z","iopub.status.idle":"2024-07-30T12:11:17.339901Z","shell.execute_reply":"2024-07-30T12:11:17.338946Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":10.860752,"end_time":"2024-07-30T12:11:17.341946","exception":false,"start_time":"2024-07-30T12:11:06.481194","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/home-credit-default-risk/sample_submission.csv\n","/kaggle/input/home-credit-default-risk/bureau_balance.csv\n","/kaggle/input/home-credit-default-risk/POS_CASH_balance.csv\n","/kaggle/input/home-credit-default-risk/application_train.csv\n","/kaggle/input/home-credit-default-risk/HomeCredit_columns_description.csv\n","/kaggle/input/home-credit-default-risk/application_test.csv\n","/kaggle/input/home-credit-default-risk/previous_application.csv\n","/kaggle/input/home-credit-default-risk/credit_card_balance.csv\n","/kaggle/input/home-credit-default-risk/installments_payments.csv\n","/kaggle/input/home-credit-default-risk/bureau.csv\n"]}],"source":["import os\n","import pandas as pd \n","import numpy as np\n","\n","import plotly.graph_objects as go\n","\n","import joblib\n","\n","import optuna\n","from lofo import LOFOImportance, Dataset, plot_importance\n","from sklearn.utils.class_weight import compute_class_weight\n","\n","import shap\n","\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from optuna.samplers import TPESampler\n","\n","from sklearn.model_selection import StratifiedKFold, cross_val_score\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.linear_model import RidgeClassifier\n","from sklearn.preprocessing import MinMaxScaler\n","from catboost import CatBoostClassifier\n","import pickle\n","from sklearn.metrics import roc_auc_score\n","from sklearn.impute import SimpleImputer\n","\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))"]},{"cell_type":"markdown","id":"c4b22f9e","metadata":{"_cell_guid":"3a5997bd-47dc-4c5f-8146-837addfe6e6f","_uuid":"47ec02fd-13f7-499a-ad17-c36642a628db","papermill":{"duration":0.015955,"end_time":"2024-07-30T12:11:17.373584","exception":false,"start_time":"2024-07-30T12:11:17.357629","status":"completed"},"tags":[]},"source":["# Utils"]},{"cell_type":"code","execution_count":3,"id":"a593839d","metadata":{"_cell_guid":"a5733263-eef2-46e5-b82a-df275afb4e2b","_uuid":"5afa4886-06af-4b42-9890-0e0e29467f94","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.40567Z","iopub.status.busy":"2024-07-30T12:11:17.405062Z","iopub.status.idle":"2024-07-30T12:11:17.409984Z","shell.execute_reply":"2024-07-30T12:11:17.409094Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.02292,"end_time":"2024-07-30T12:11:17.41182","exception":false,"start_time":"2024-07-30T12:11:17.3889","status":"completed"},"tags":[]},"outputs":[],"source":["def merge_dfs(df_main, df_merge):\n","    df_main = df_main.merge(right=df_merge.reset_index(), how='left', on='SK_ID_CURR')\n","    return df_main"]},{"cell_type":"code","execution_count":4,"id":"36e94a89","metadata":{"_cell_guid":"8905a533-87da-4988-8cba-4a8b143376a2","_uuid":"0f8dcc1c-1b1e-454a-9f05-c79a3b532547","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.443241Z","iopub.status.busy":"2024-07-30T12:11:17.442965Z","iopub.status.idle":"2024-07-30T12:11:17.449259Z","shell.execute_reply":"2024-07-30T12:11:17.448504Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.02415,"end_time":"2024-07-30T12:11:17.451119","exception":false,"start_time":"2024-07-30T12:11:17.426969","status":"completed"},"tags":[]},"outputs":[],"source":["def visualize_new_features(df, target, new_features_list):\n","    plt.figure(figsize = (8, 6))\n","    \n","    for i, feature in enumerate(new_features_list):\n","        \n","        plt.subplot(4, 1, i + 1)\n","\n","        sns.kdeplot(df.loc[df[target] == 0, feature], label = 'target == 0')\n","        sns.kdeplot(df.loc[df[target] == 1, feature], label = 'target == 1')\n","    \n","        plt.title('Distribution of %s by Target Value' % feature)\n","        plt.xlabel('%s' % feature); plt.ylabel('Density');\n","    \n","    plt.tight_layout(h_pad = 2.5)"]},{"cell_type":"code","execution_count":5,"id":"bc43d989","metadata":{"_cell_guid":"7303426c-56e7-4c59-8c31-aa425d5a0f3d","_uuid":"9fabd9f5-4c22-453f-bfe8-4737705a2e70","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.482925Z","iopub.status.busy":"2024-07-30T12:11:17.482241Z","iopub.status.idle":"2024-07-30T12:11:17.488105Z","shell.execute_reply":"2024-07-30T12:11:17.487256Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.023594,"end_time":"2024-07-30T12:11:17.489904","exception":false,"start_time":"2024-07-30T12:11:17.46631","status":"completed"},"tags":[]},"outputs":[],"source":["def visualize_missing_values(df):\n","    missing_values = df.isnull().sum()\n","    missing_values = missing_values[missing_values > 0]\n","    \n","    trace = go.Bar(x=missing_values.index,\n","                   y=missing_values.values,\n","                   marker=dict(color='orange'))\n","\n","    layout = go.Layout(title='Missing Values by Feature',\n","                       xaxis=dict(title='Features'),\n","                       yaxis=dict(title='Number of Missing Values'))\n","\n","    fig = go.Figure(data=[trace], layout=layout)\n","\n","    fig.show()"]},{"cell_type":"code","execution_count":6,"id":"2e7ed8ff","metadata":{"_cell_guid":"cfc78dbb-1ea7-46c5-bf0b-a575568468b9","_uuid":"607912cc-7fa0-411e-b81d-b780f154bd90","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.521375Z","iopub.status.busy":"2024-07-30T12:11:17.521114Z","iopub.status.idle":"2024-07-30T12:11:17.525415Z","shell.execute_reply":"2024-07-30T12:11:17.524453Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.022145,"end_time":"2024-07-30T12:11:17.527238","exception":false,"start_time":"2024-07-30T12:11:17.505093","status":"completed"},"tags":[]},"outputs":[],"source":["def find_unique_features(train_set, test_set):\n","    unique_features = set(test_set.columns) - set(train_set.columns)\n","    return unique_features"]},{"cell_type":"code","execution_count":7,"id":"54419fee","metadata":{"_cell_guid":"8d195f79-6908-46d0-98f5-779559dcc018","_uuid":"7c2dc2f8-f1bd-48d0-a994-31c22c26ab32","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.558824Z","iopub.status.busy":"2024-07-30T12:11:17.558554Z","iopub.status.idle":"2024-07-30T12:11:17.562571Z","shell.execute_reply":"2024-07-30T12:11:17.56173Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.022031,"end_time":"2024-07-30T12:11:17.564559","exception":false,"start_time":"2024-07-30T12:11:17.542528","status":"completed"},"tags":[]},"outputs":[],"source":["def drop_unique_features(test_set, unique_features):\n","    test_set = test_set.drop(columns=unique_features)\n","    return test_set"]},{"cell_type":"markdown","id":"3f4e9578","metadata":{"_cell_guid":"557673eb-8a8d-4e34-bf20-fe0d7ae03849","_uuid":"5656845e-3069-457f-9b79-7320307504a2","papermill":{"duration":0.014948,"end_time":"2024-07-30T12:11:17.594611","exception":false,"start_time":"2024-07-30T12:11:17.579663","status":"completed"},"tags":[]},"source":["# Datasets"]},{"cell_type":"code","execution_count":8,"id":"eb60b152","metadata":{"_cell_guid":"0d46257f-3f9d-4c5b-b397-3b52105206bd","_uuid":"648b2ba3-c41f-4558-8aa0-fc216822f6d3","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:17.625804Z","iopub.status.busy":"2024-07-30T12:11:17.625556Z","iopub.status.idle":"2024-07-30T12:11:24.460704Z","shell.execute_reply":"2024-07-30T12:11:24.459899Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":6.853458,"end_time":"2024-07-30T12:11:24.463132","exception":false,"start_time":"2024-07-30T12:11:17.609674","status":"completed"},"tags":[]},"outputs":[],"source":["app_train = pd.read_csv(\"../input/home-credit-default-risk/application_train.csv\")\n","app_test = pd.read_csv(\"../input/home-credit-default-risk/application_test.csv\")\n","subm = pd.read_csv(\"../input/home-credit-default-risk/sample_submission.csv\")"]},{"cell_type":"code","execution_count":9,"id":"0e837f34","metadata":{"_cell_guid":"e4e39fc8-7883-410d-92c1-4ca014a2eb87","_uuid":"6e5abdda-ca80-44e6-bb96-81a512e1ffa7","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:11:24.495951Z","iopub.status.busy":"2024-07-30T12:11:24.495619Z","iopub.status.idle":"2024-07-30T12:12:35.633576Z","shell.execute_reply":"2024-07-30T12:12:35.632743Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":71.156571,"end_time":"2024-07-30T12:12:35.635952","exception":false,"start_time":"2024-07-30T12:11:24.479381","status":"completed"},"tags":[]},"outputs":[],"source":["pos_cash = pd.read_csv('../input/home-credit-default-risk/POS_CASH_balance.csv')\n","credit_card = pd.read_csv('../input/home-credit-default-risk/credit_card_balance.csv')\n","bureau = pd.read_csv('../input/home-credit-default-risk/bureau.csv')\n","bureau_balance = pd.read_csv('../input/home-credit-default-risk/bureau_balance.csv')\n","previous_app = pd.read_csv('../input/home-credit-default-risk/previous_application.csv')\n","install_payments = pd.read_csv('../input/home-credit-default-risk/installments_payments.csv')"]},{"cell_type":"code","execution_count":10,"id":"844ca4fc","metadata":{"_cell_guid":"0fcfc847-e8b6-44e9-865e-8050191dee5a","_uuid":"690926df-f577-41df-8c74-10f1a0bfa7d5","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:35.668665Z","iopub.status.busy":"2024-07-30T12:12:35.668314Z","iopub.status.idle":"2024-07-30T12:12:37.04506Z","shell.execute_reply":"2024-07-30T12:12:37.044174Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":1.39536,"end_time":"2024-07-30T12:12:37.047448","exception":false,"start_time":"2024-07-30T12:12:35.652088","status":"completed"},"tags":[]},"outputs":[],"source":["prev_apps_count = previous_app[['SK_ID_CURR', 'SK_ID_PREV']].groupby('SK_ID_CURR').count()\n","previous_app['SK_ID_PREV'] = previous_app['SK_ID_CURR'].map(prev_apps_count['SK_ID_PREV'])\n","\n","prev_apps_avg = previous_app.groupby('SK_ID_CURR')[previous_app.select_dtypes(include='number').columns].mean()\n","prev_apps_avg.columns = ['P_' + col for col in prev_apps_avg.columns]\n","\n","app_train = merge_dfs(app_train, prev_apps_avg)\n","app_test = merge_dfs(app_test, prev_apps_avg)"]},{"cell_type":"code","execution_count":11,"id":"51656592","metadata":{"_cell_guid":"0d3c7375-2e46-49e4-87ad-d1733e9cf545","_uuid":"2863c86b-fcdd-4867-bfef-78f778c3b964","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:37.079357Z","iopub.status.busy":"2024-07-30T12:12:37.079057Z","iopub.status.idle":"2024-07-30T12:12:38.105637Z","shell.execute_reply":"2024-07-30T12:12:38.104634Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":1.044928,"end_time":"2024-07-30T12:12:38.108001","exception":false,"start_time":"2024-07-30T12:12:37.063073","status":"completed"},"tags":[]},"outputs":[],"source":["bureau_avg = bureau.groupby('SK_ID_CURR')[bureau.select_dtypes(include='number').columns].mean()\n","bureau_avg['BUREAU_COUNT'] = bureau[['SK_ID_BUREAU','SK_ID_CURR']].groupby('SK_ID_CURR').count()['SK_ID_BUREAU']\n","bureau_avg.columns = ['B_' + col for col in bureau_avg.columns]\n","\n","app_train = merge_dfs(app_train, bureau_avg)\n","app_test = merge_dfs(app_test, bureau_avg)"]},{"cell_type":"code","execution_count":12,"id":"94720439","metadata":{"_cell_guid":"d4f9d8ba-f70a-4021-b6d7-f182261abebe","_uuid":"61774258-ebc0-4124-9cbf-9a09611972f3","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:38.140305Z","iopub.status.busy":"2024-07-30T12:12:38.139967Z","iopub.status.idle":"2024-07-30T12:12:41.753201Z","shell.execute_reply":"2024-07-30T12:12:41.752326Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":3.632025,"end_time":"2024-07-30T12:12:41.75558","exception":false,"start_time":"2024-07-30T12:12:38.123555","status":"completed"},"tags":[]},"outputs":[],"source":["install_count = install_payments[['SK_ID_CURR', 'SK_ID_PREV']].groupby('SK_ID_CURR').count()\n","install_payments['SK_ID_PREV'] = install_payments['SK_ID_CURR'].map(install_count['SK_ID_PREV'])\n","\n","install_avg = install_payments.groupby('SK_ID_CURR')[install_payments.select_dtypes(include='number').columns].mean()\n","install_avg.columns = ['I_' + col for col in install_avg.columns]\n","\n","app_train = merge_dfs(app_train, install_avg)\n","app_test = merge_dfs(app_test, install_avg)"]},{"cell_type":"code","execution_count":13,"id":"9eada7cc","metadata":{"_cell_guid":"be69558c-40ad-4f4e-b418-0149f5ed91af","_uuid":"9834c6ec-e188-42a8-8eb5-e81bb191c5fd","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:41.788531Z","iopub.status.busy":"2024-07-30T12:12:41.788215Z","iopub.status.idle":"2024-07-30T12:12:43.941684Z","shell.execute_reply":"2024-07-30T12:12:43.940916Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":2.172307,"end_time":"2024-07-30T12:12:43.944054","exception":false,"start_time":"2024-07-30T12:12:41.771747","status":"completed"},"tags":[]},"outputs":[],"source":["prev_credit_count = credit_card[['SK_ID_CURR', 'SK_ID_PREV']].groupby('SK_ID_CURR').count()\n","credit_card['SK_ID_PREV'] = credit_card['SK_ID_CURR'].map(prev_credit_count['SK_ID_PREV'])\n","\n","avg_credit_bal = credit_card.groupby('SK_ID_CURR')[credit_card.select_dtypes(include='number').columns].mean()\n","avg_credit_bal.columns = ['CC_B_' + col for col in avg_credit_bal.columns]\n","\n","app_train = merge_dfs(app_train, avg_credit_bal)\n","app_test = merge_dfs(app_test, avg_credit_bal)"]},{"cell_type":"code","execution_count":14,"id":"751244e4","metadata":{"_cell_guid":"c315c0dc-451a-4fc5-8f95-904c9b01b37f","_uuid":"11d10bad-9876-4384-8e27-f15cfe78fcf7","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:43.976918Z","iopub.status.busy":"2024-07-30T12:12:43.976584Z","iopub.status.idle":"2024-07-30T12:12:44.006516Z","shell.execute_reply":"2024-07-30T12:12:44.005616Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.049101,"end_time":"2024-07-30T12:12:44.008647","exception":false,"start_time":"2024-07-30T12:12:43.959546","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SK_ID_CURR</th>\n","      <th>TARGET</th>\n","      <th>NAME_CONTRACT_TYPE</th>\n","      <th>CODE_GENDER</th>\n","      <th>FLAG_OWN_CAR</th>\n","      <th>FLAG_OWN_REALTY</th>\n","      <th>CNT_CHILDREN</th>\n","      <th>AMT_INCOME_TOTAL</th>\n","      <th>AMT_CREDIT</th>\n","      <th>AMT_ANNUITY</th>\n","      <th>...</th>\n","      <th>CC_B_AMT_RECEIVABLE_PRINCIPAL</th>\n","      <th>CC_B_AMT_RECIVABLE</th>\n","      <th>CC_B_AMT_TOTAL_RECEIVABLE</th>\n","      <th>CC_B_CNT_DRAWINGS_ATM_CURRENT</th>\n","      <th>CC_B_CNT_DRAWINGS_CURRENT</th>\n","      <th>CC_B_CNT_DRAWINGS_OTHER_CURRENT</th>\n","      <th>CC_B_CNT_DRAWINGS_POS_CURRENT</th>\n","      <th>CC_B_CNT_INSTALMENT_MATURE_CUM</th>\n","      <th>CC_B_SK_DPD</th>\n","      <th>CC_B_SK_DPD_DEF</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>100002</td>\n","      <td>1</td>\n","      <td>Cash loans</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>202500.0</td>\n","      <td>406597.5</td>\n","      <td>24700.5</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>100003</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0</td>\n","      <td>270000.0</td>\n","      <td>1293502.5</td>\n","      <td>35698.5</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>100004</td>\n","      <td>0</td>\n","      <td>Revolving loans</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>67500.0</td>\n","      <td>135000.0</td>\n","      <td>6750.0</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>100006</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>135000.0</td>\n","      <td>312682.5</td>\n","      <td>29686.5</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>100007</td>\n","      <td>0</td>\n","      <td>Cash loans</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>0</td>\n","      <td>121500.0</td>\n","      <td>513000.0</td>\n","      <td>21865.5</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 188 columns</p>\n","</div>"],"text/plain":["   SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n","0      100002       1         Cash loans           M            N   \n","1      100003       0         Cash loans           F            N   \n","2      100004       0    Revolving loans           M            Y   \n","3      100006       0         Cash loans           F            N   \n","4      100007       0         Cash loans           M            N   \n","\n","  FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  \\\n","0               Y             0          202500.0    406597.5      24700.5   \n","1               N             0          270000.0   1293502.5      35698.5   \n","2               Y             0           67500.0    135000.0       6750.0   \n","3               Y             0          135000.0    312682.5      29686.5   \n","4               Y             0          121500.0    513000.0      21865.5   \n","\n","   ...  CC_B_AMT_RECEIVABLE_PRINCIPAL CC_B_AMT_RECIVABLE  \\\n","0  ...                            NaN                NaN   \n","1  ...                            NaN                NaN   \n","2  ...                            NaN                NaN   \n","3  ...                            0.0                0.0   \n","4  ...                            NaN                NaN   \n","\n","  CC_B_AMT_TOTAL_RECEIVABLE CC_B_CNT_DRAWINGS_ATM_CURRENT  \\\n","0                       NaN                           NaN   \n","1                       NaN                           NaN   \n","2                       NaN                           NaN   \n","3                       0.0                           NaN   \n","4                       NaN                           NaN   \n","\n","  CC_B_CNT_DRAWINGS_CURRENT CC_B_CNT_DRAWINGS_OTHER_CURRENT  \\\n","0                       NaN                             NaN   \n","1                       NaN                             NaN   \n","2                       NaN                             NaN   \n","3                       0.0                             NaN   \n","4                       NaN                             NaN   \n","\n","   CC_B_CNT_DRAWINGS_POS_CURRENT  CC_B_CNT_INSTALMENT_MATURE_CUM  CC_B_SK_DPD  \\\n","0                            NaN                             NaN          NaN   \n","1                            NaN                             NaN          NaN   \n","2                            NaN                             NaN          NaN   \n","3                            NaN                             0.0          0.0   \n","4                            NaN                             NaN          NaN   \n","\n","   CC_B_SK_DPD_DEF  \n","0              NaN  \n","1              NaN  \n","2              NaN  \n","3              0.0  \n","4              NaN  \n","\n","[5 rows x 188 columns]"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["app_train.head()"]},{"cell_type":"markdown","id":"5adc9675","metadata":{"_cell_guid":"a978d27d-69a3-485f-89e0-3a3c22417d4b","_uuid":"4c2f9b63-8133-48fd-9707-fe6627fbe0ff","papermill":{"duration":0.015816,"end_time":"2024-07-30T12:12:44.040368","exception":false,"start_time":"2024-07-30T12:12:44.024552","status":"completed"},"tags":[]},"source":["# Preprocess & Feature Engineering"]},{"cell_type":"code","execution_count":15,"id":"c9820ef0","metadata":{"_cell_guid":"bb501453-31e9-498b-99c5-c71f73d55b6a","_uuid":"e3c591b6-d3c5-4058-8a9c-aaa50e539bf0","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:44.073987Z","iopub.status.busy":"2024-07-30T12:12:44.073335Z","iopub.status.idle":"2024-07-30T12:12:44.539052Z","shell.execute_reply":"2024-07-30T12:12:44.538063Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.485262,"end_time":"2024-07-30T12:12:44.541496","exception":false,"start_time":"2024-07-30T12:12:44.056234","status":"completed"},"tags":[]},"outputs":[],"source":["app_train_domain = app_train.copy()\n","app_test_domain = app_test.copy()\n","\n","app_train_domain['CREDIT_INCOME_PERCENT'] = app_train_domain['AMT_CREDIT'] / app_train_domain['AMT_INCOME_TOTAL']\n","app_train_domain['ANNUITY_INCOME_PERCENT'] = app_train_domain['AMT_ANNUITY'] / app_train_domain['AMT_INCOME_TOTAL']\n","app_train_domain['CREDIT_TERM'] = app_train_domain['AMT_ANNUITY'] / app_train_domain['AMT_CREDIT']\n","app_train_domain['DAYS_EMPLOYED_PERCENT'] = app_train_domain['DAYS_EMPLOYED'] / app_train_domain['DAYS_BIRTH']\n","\n","app_test_domain['CREDIT_INCOME_PERCENT'] = app_test_domain['AMT_CREDIT'] / app_test_domain['AMT_INCOME_TOTAL']\n","app_test_domain['ANNUITY_INCOME_PERCENT'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_INCOME_TOTAL']\n","app_test_domain['CREDIT_TERM'] = app_test_domain['AMT_ANNUITY'] / app_test_domain['AMT_CREDIT']\n","app_test_domain['DAYS_EMPLOYED_PERCENT'] = app_test_domain['DAYS_EMPLOYED'] / app_test_domain['DAYS_BIRTH']"]},{"cell_type":"code","execution_count":16,"id":"4cef0cd9","metadata":{"_cell_guid":"c1dcfffa-ca64-4a15-8acb-a6b824b7c289","_uuid":"7b4a3af4-c57d-4062-b4be-11da0e14a6f0","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:44.574399Z","iopub.status.busy":"2024-07-30T12:12:44.574092Z","iopub.status.idle":"2024-07-30T12:12:51.3926Z","shell.execute_reply":"2024-07-30T12:12:51.391658Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":6.837228,"end_time":"2024-07-30T12:12:51.394579","exception":false,"start_time":"2024-07-30T12:12:44.557351","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 800x600 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["visualize_new_features(app_train_domain, \"TARGET\", ['CREDIT_INCOME_PERCENT', 'ANNUITY_INCOME_PERCENT', 'CREDIT_TERM', 'DAYS_EMPLOYED_PERCENT'])"]},{"cell_type":"code","execution_count":17,"id":"36340cdd","metadata":{"_cell_guid":"c06aea57-f03b-4280-91df-6007b96ce2f6","_uuid":"50c32c1c-f9ec-4691-bf24-e274e7e44ced","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:51.429698Z","iopub.status.busy":"2024-07-30T12:12:51.429148Z","iopub.status.idle":"2024-07-30T12:12:51.462818Z","shell.execute_reply":"2024-07-30T12:12:51.461808Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.053568,"end_time":"2024-07-30T12:12:51.465132","exception":false,"start_time":"2024-07-30T12:12:51.411564","status":"completed"},"tags":[]},"outputs":[],"source":["unique_features_test_set = find_unique_features(app_train_domain, app_test_domain)\n","app_test_domain = drop_unique_features(app_test_domain, unique_features_test_set)"]},{"cell_type":"code","execution_count":18,"id":"cbf06237","metadata":{"_cell_guid":"4aeaf3ae-c251-424a-8dab-3f60e3738443","_uuid":"b348eed1-afff-4cd4-81f3-4672296e0685","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:51.500334Z","iopub.status.busy":"2024-07-30T12:12:51.500009Z","iopub.status.idle":"2024-07-30T12:12:51.504441Z","shell.execute_reply":"2024-07-30T12:12:51.503541Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.023978,"end_time":"2024-07-30T12:12:51.506303","exception":false,"start_time":"2024-07-30T12:12:51.482325","status":"completed"},"tags":[]},"outputs":[],"source":["labels = app_train['TARGET']"]},{"cell_type":"code","execution_count":19,"id":"6642bebb","metadata":{"_cell_guid":"eb85bba0-9ef3-4f08-8317-b82ea0173256","_uuid":"eda7f16d-77f1-4806-b531-f3168d6c68f7","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:51.588385Z","iopub.status.busy":"2024-07-30T12:12:51.587678Z","iopub.status.idle":"2024-07-30T12:12:51.804901Z","shell.execute_reply":"2024-07-30T12:12:51.803911Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.237454,"end_time":"2024-07-30T12:12:51.807231","exception":false,"start_time":"2024-07-30T12:12:51.569777","status":"completed"},"tags":[]},"outputs":[],"source":["app_train_domain.drop(['SK_ID_CURR', 'TARGET'], axis=1, inplace=True)\n","app_test_domain.drop(['SK_ID_CURR'], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":20,"id":"abfa41cd","metadata":{"_cell_guid":"c365620d-76ed-400e-8ad8-1788df51084b","_uuid":"6ca38c4e-86bf-4eef-8388-e8b60a6f7be9","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:51.843423Z","iopub.status.busy":"2024-07-30T12:12:51.842728Z","iopub.status.idle":"2024-07-30T12:12:52.260297Z","shell.execute_reply":"2024-07-30T12:12:52.259233Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.438041,"end_time":"2024-07-30T12:12:52.26272","exception":false,"start_time":"2024-07-30T12:12:51.824679","status":"completed"},"tags":[]},"outputs":[],"source":["num_features = app_train_domain.select_dtypes(include=['number']).columns\n","cat_features = app_train_domain.select_dtypes(include=['object']).columns"]},{"cell_type":"code","execution_count":21,"id":"0a2f36ab","metadata":{"execution":{"iopub.execute_input":"2024-07-30T12:12:52.299034Z","iopub.status.busy":"2024-07-30T12:12:52.298257Z","iopub.status.idle":"2024-07-30T12:12:52.304072Z","shell.execute_reply":"2024-07-30T12:12:52.303193Z"},"papermill":{"duration":0.02604,"end_time":"2024-07-30T12:12:52.30597","exception":false,"start_time":"2024-07-30T12:12:52.27993","status":"completed"},"tags":[]},"outputs":[],"source":["num_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='median')),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline(steps=[\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_features),\n","        ('cat', cat_transformer, cat_features)\n","    ]\n",")"]},{"cell_type":"code","execution_count":22,"id":"041bdbe0","metadata":{"_cell_guid":"62df54f8-a1a3-4aa4-944b-f629953f8508","_uuid":"4a9dc567-8000-4924-b1a3-91377889483f","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:12:52.340992Z","iopub.status.busy":"2024-07-30T12:12:52.340419Z","iopub.status.idle":"2024-07-30T12:13:04.692326Z","shell.execute_reply":"2024-07-30T12:13:04.691248Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":12.37204,"end_time":"2024-07-30T12:13:04.694755","exception":false,"start_time":"2024-07-30T12:12:52.322715","status":"completed"},"tags":[]},"outputs":[],"source":["train_processed = preprocessor.fit_transform(app_train_domain)\n","\n","feature_names = []\n","for name, transformer, columns in preprocessor.transformers_:\n","    if hasattr(transformer, 'get_feature_names_out'):\n","        feature_names.extend(transformer.get_feature_names_out(columns))\n","    else:\n","        feature_names.extend(columns)\n","\n","train_processed = pd.DataFrame(train_processed, columns=feature_names)\n","\n","test_processed = preprocessor.transform(app_test_domain)\n","test_processed = pd.DataFrame(test_processed, columns=feature_names)"]},{"cell_type":"code","execution_count":23,"id":"793398ff","metadata":{"_cell_guid":"14d8d13d-07b4-45af-bb9a-c1630dabe6ed","_uuid":"32ccda4c-42b3-49bc-93a9-86330f31da5f","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:04.73Z","iopub.status.busy":"2024-07-30T12:13:04.729663Z","iopub.status.idle":"2024-07-30T12:13:04.756866Z","shell.execute_reply":"2024-07-30T12:13:04.755993Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.046966,"end_time":"2024-07-30T12:13:04.758865","exception":false,"start_time":"2024-07-30T12:13:04.711899","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CNT_CHILDREN</th>\n","      <th>AMT_INCOME_TOTAL</th>\n","      <th>AMT_CREDIT</th>\n","      <th>AMT_ANNUITY</th>\n","      <th>AMT_GOODS_PRICE</th>\n","      <th>REGION_POPULATION_RELATIVE</th>\n","      <th>DAYS_BIRTH</th>\n","      <th>DAYS_EMPLOYED</th>\n","      <th>DAYS_REGISTRATION</th>\n","      <th>DAYS_ID_PUBLISH</th>\n","      <th>...</th>\n","      <th>HOUSETYPE_MODE_terraced house</th>\n","      <th>WALLSMATERIAL_MODE_Block</th>\n","      <th>WALLSMATERIAL_MODE_Mixed</th>\n","      <th>WALLSMATERIAL_MODE_Monolithic</th>\n","      <th>WALLSMATERIAL_MODE_Others</th>\n","      <th>WALLSMATERIAL_MODE_Panel</th>\n","      <th>WALLSMATERIAL_MODE_Stone, brick</th>\n","      <th>WALLSMATERIAL_MODE_Wooden</th>\n","      <th>EMERGENCYSTATE_MODE_No</th>\n","      <th>EMERGENCYSTATE_MODE_Yes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.577538</td>\n","      <td>0.142129</td>\n","      <td>-0.478095</td>\n","      <td>-0.166143</td>\n","      <td>-0.507236</td>\n","      <td>-0.149452</td>\n","      <td>1.506880</td>\n","      <td>-0.456215</td>\n","      <td>0.379837</td>\n","      <td>0.579154</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.577538</td>\n","      <td>0.426792</td>\n","      <td>1.725450</td>\n","      <td>0.592683</td>\n","      <td>1.600873</td>\n","      <td>-1.252750</td>\n","      <td>-0.166821</td>\n","      <td>-0.460115</td>\n","      <td>1.078697</td>\n","      <td>1.790855</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.577538</td>\n","      <td>-0.427196</td>\n","      <td>-1.152888</td>\n","      <td>-1.404669</td>\n","      <td>-1.092145</td>\n","      <td>-0.783451</td>\n","      <td>-0.689509</td>\n","      <td>-0.453299</td>\n","      <td>0.206116</td>\n","      <td>0.306869</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.577538</td>\n","      <td>-0.142533</td>\n","      <td>-0.711430</td>\n","      <td>0.177874</td>\n","      <td>-0.653463</td>\n","      <td>-0.928991</td>\n","      <td>-0.680114</td>\n","      <td>-0.473217</td>\n","      <td>-1.375829</td>\n","      <td>0.369143</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.577538</td>\n","      <td>-0.199466</td>\n","      <td>-0.213734</td>\n","      <td>-0.361749</td>\n","      <td>-0.068554</td>\n","      <td>0.563570</td>\n","      <td>-0.892535</td>\n","      <td>-0.473210</td>\n","      <td>0.191639</td>\n","      <td>-0.307263</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 314 columns</p>\n","</div>"],"text/plain":["   CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  AMT_GOODS_PRICE  \\\n","0     -0.577538          0.142129   -0.478095    -0.166143        -0.507236   \n","1     -0.577538          0.426792    1.725450     0.592683         1.600873   \n","2     -0.577538         -0.427196   -1.152888    -1.404669        -1.092145   \n","3     -0.577538         -0.142533   -0.711430     0.177874        -0.653463   \n","4     -0.577538         -0.199466   -0.213734    -0.361749        -0.068554   \n","\n","   REGION_POPULATION_RELATIVE  DAYS_BIRTH  DAYS_EMPLOYED  DAYS_REGISTRATION  \\\n","0                   -0.149452    1.506880      -0.456215           0.379837   \n","1                   -1.252750   -0.166821      -0.460115           1.078697   \n","2                   -0.783451   -0.689509      -0.453299           0.206116   \n","3                   -0.928991   -0.680114      -0.473217          -1.375829   \n","4                    0.563570   -0.892535      -0.473210           0.191639   \n","\n","   DAYS_ID_PUBLISH  ...  HOUSETYPE_MODE_terraced house  \\\n","0         0.579154  ...                            0.0   \n","1         1.790855  ...                            0.0   \n","2         0.306869  ...                            0.0   \n","3         0.369143  ...                            0.0   \n","4        -0.307263  ...                            0.0   \n","\n","   WALLSMATERIAL_MODE_Block  WALLSMATERIAL_MODE_Mixed  \\\n","0                       0.0                       0.0   \n","1                       1.0                       0.0   \n","2                       0.0                       0.0   \n","3                       0.0                       0.0   \n","4                       0.0                       0.0   \n","\n","   WALLSMATERIAL_MODE_Monolithic  WALLSMATERIAL_MODE_Others  \\\n","0                            0.0                        0.0   \n","1                            0.0                        0.0   \n","2                            0.0                        0.0   \n","3                            0.0                        0.0   \n","4                            0.0                        0.0   \n","\n","   WALLSMATERIAL_MODE_Panel  WALLSMATERIAL_MODE_Stone, brick  \\\n","0                       0.0                              1.0   \n","1                       0.0                              0.0   \n","2                       1.0                              0.0   \n","3                       1.0                              0.0   \n","4                       1.0                              0.0   \n","\n","   WALLSMATERIAL_MODE_Wooden  EMERGENCYSTATE_MODE_No  EMERGENCYSTATE_MODE_Yes  \n","0                        0.0                     1.0                      0.0  \n","1                        0.0                     1.0                      0.0  \n","2                        0.0                     1.0                      0.0  \n","3                        0.0                     1.0                      0.0  \n","4                        0.0                     1.0                      0.0  \n","\n","[5 rows x 314 columns]"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["train_processed.head()"]},{"cell_type":"code","execution_count":24,"id":"77698895","metadata":{"_cell_guid":"a2dde8e9-7e99-4919-aff0-855a8d8f54e0","_uuid":"831112f2-5edc-4bc1-84ba-f30c5fc6c301","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:04.79522Z","iopub.status.busy":"2024-07-30T12:13:04.794931Z","iopub.status.idle":"2024-07-30T12:13:04.917824Z","shell.execute_reply":"2024-07-30T12:13:04.916659Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.142842,"end_time":"2024-07-30T12:13:04.919907","exception":false,"start_time":"2024-07-30T12:13:04.777065","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index([], dtype='object')\n","Index([], dtype='object')\n"]}],"source":["print(train_processed.columns[train_processed.isnull().any()])\n","print(test_processed.columns[test_processed.isnull().any()])"]},{"cell_type":"markdown","id":"ca885b05","metadata":{"_cell_guid":"8ea88109-1799-4706-95b6-1bd526d69204","_uuid":"931d351d-dedd-4353-91c5-6fd8c73111ae","papermill":{"duration":0.017475,"end_time":"2024-07-30T12:13:04.95509","exception":false,"start_time":"2024-07-30T12:13:04.937615","status":"completed"},"tags":[]},"source":["# 3. Cross Validation"]},{"cell_type":"code","execution_count":25,"id":"ae8ac0c0","metadata":{"_cell_guid":"6ed96129-376f-4c5c-8b4a-5ea30f331181","_uuid":"200e7f10-3fcf-4ccb-ae3f-6f5edbd52d31","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:04.991434Z","iopub.status.busy":"2024-07-30T12:13:04.991073Z","iopub.status.idle":"2024-07-30T12:13:04.998458Z","shell.execute_reply":"2024-07-30T12:13:04.99756Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.027825,"end_time":"2024-07-30T12:13:05.000339","exception":false,"start_time":"2024-07-30T12:13:04.972514","status":"completed"},"tags":[]},"outputs":[],"source":[" def cross_validate_model(model, X, y, cv):\n","    auc_scores = []\n","        \n","    for fold, (train_index, val_index) in enumerate(cv.split(X, y)):\n","        X_train_cv, X_val_cv = X.iloc[train_index], X.iloc[val_index]\n","        y_train_cv, y_val_cv = y.iloc[train_index], y.iloc[val_index]\n","        \n","        if isinstance(model, CatBoostClassifier):\n","            model.fit(X_train_cv, y_train_cv, eval_set=(X_val_cv, y_val_cv), verbose=False)\n","            y_pred_prob = model.predict_proba(X_val_cv)[:, 1]\n","        else:\n","            model.fit(X_train_cv, y_train_cv)\n","            y_pred_prob = model.predict(X_val_cv)\n","        \n","        auc_score = roc_auc_score(y_val_cv, y_pred_prob)\n","        auc_scores.append(auc_score)\n","    \n","    return np.mean(auc_scores)"]},{"cell_type":"code","execution_count":26,"id":"fab73555","metadata":{"_cell_guid":"8dca1f9c-2395-40fa-88a0-35369c71fb1f","_uuid":"43ecbb1a-4980-4a2b-a50f-84a3073342c5","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:05.036844Z","iopub.status.busy":"2024-07-30T12:13:05.036527Z","iopub.status.idle":"2024-07-30T12:13:05.040786Z","shell.execute_reply":"2024-07-30T12:13:05.039931Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.024904,"end_time":"2024-07-30T12:13:05.04266","exception":false,"start_time":"2024-07-30T12:13:05.017756","status":"completed"},"tags":[]},"outputs":[],"source":["stk_fold = StratifiedKFold(n_splits = 5, shuffle = False)"]},{"cell_type":"markdown","id":"70193b37","metadata":{"_cell_guid":"24618e7c-d80a-4112-9c1a-022f2c5c5d9b","_uuid":"3739a061-2613-43a6-890f-235035833f8e","papermill":{"duration":0.017069,"end_time":"2024-07-30T12:13:05.078308","exception":false,"start_time":"2024-07-30T12:13:05.061239","status":"completed"},"tags":[]},"source":["# 4. Baseline Model"]},{"cell_type":"code","execution_count":27,"id":"938d9371","metadata":{"_cell_guid":"e10264a5-4e29-4102-9269-e96010929bc3","_uuid":"0fd66c48-0d03-4e7b-87f1-5f8577770ae7","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:05.114068Z","iopub.status.busy":"2024-07-30T12:13:05.113737Z","iopub.status.idle":"2024-07-30T12:13:05.120665Z","shell.execute_reply":"2024-07-30T12:13:05.11979Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.027037,"end_time":"2024-07-30T12:13:05.122536","exception":false,"start_time":"2024-07-30T12:13:05.095499","status":"completed"},"tags":[]},"outputs":[],"source":["cb_model = CatBoostClassifier(verbose=0)"]},{"cell_type":"code","execution_count":28,"id":"ead7336f","metadata":{"_cell_guid":"090b45fc-5ae7-424a-af31-35d5361f72a7","_uuid":"563ee3f7-49fd-4aa9-8427-6c520e9bcdd5","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:05.158323Z","iopub.status.busy":"2024-07-30T12:13:05.158067Z","iopub.status.idle":"2024-07-30T12:13:05.162082Z","shell.execute_reply":"2024-07-30T12:13:05.161205Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.024219,"end_time":"2024-07-30T12:13:05.163927","exception":false,"start_time":"2024-07-30T12:13:05.139708","status":"completed"},"tags":[]},"outputs":[],"source":["#cb_model_score = cross_validate_model(cb_model, train_processed, labels, stk_fold)\n","#print(f\"The baseline metric for CatBoost is {cb_model_score}\")"]},{"cell_type":"code","execution_count":29,"id":"7e62b7c6","metadata":{"_cell_guid":"445868e1-6190-444b-89bc-4217d34866b1","_uuid":"d0795d81-88d7-4ce4-afa6-679e7f20f577","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:13:05.199319Z","iopub.status.busy":"2024-07-30T12:13:05.199063Z","iopub.status.idle":"2024-07-30T12:22:28.694084Z","shell.execute_reply":"2024-07-30T12:22:28.692892Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":563.516242,"end_time":"2024-07-30T12:22:28.69726","exception":false,"start_time":"2024-07-30T12:13:05.181018","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"source":["scores = cross_val_score(cb_model, train_processed, labels, cv=stk_fold, scoring='roc_auc')"]},{"cell_type":"code","execution_count":30,"id":"252f04ea","metadata":{"_cell_guid":"2102e4d7-3dc0-4d1d-b310-971935defad3","_uuid":"1b360aeb-474d-409f-bd52-c0bfd2b34b06","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:22:28.748129Z","iopub.status.busy":"2024-07-30T12:22:28.747275Z","iopub.status.idle":"2024-07-30T12:22:28.752444Z","shell.execute_reply":"2024-07-30T12:22:28.751578Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.030395,"end_time":"2024-07-30T12:22:28.754361","exception":false,"start_time":"2024-07-30T12:22:28.723966","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["ROC AUC Score: 0.7721425227668114\n"]}],"source":["print(f'ROC AUC Score: {scores.mean()}')"]},{"cell_type":"markdown","id":"2ab3b9d1","metadata":{"_cell_guid":"2068b2d8-f123-4ebd-96fa-4fea210b518c","_uuid":"b0d32419-eb64-44a9-9c6d-e3fc7bb9fa9b","papermill":{"duration":0.016909,"end_time":"2024-07-30T12:22:28.788625","exception":false,"start_time":"2024-07-30T12:22:28.771716","status":"completed"},"tags":[]},"source":["# 5. Lofo Importance"]},{"cell_type":"code","execution_count":31,"id":"1f2c2add","metadata":{"_cell_guid":"c1fb6108-9cba-48fb-b409-a712938d697f","_kg_hide-output":true,"_uuid":"465ffa79-f2a0-4dd6-9fd1-1b6d74aba449","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:22:28.824326Z","iopub.status.busy":"2024-07-30T12:22:28.824041Z","iopub.status.idle":"2024-07-30T12:40:17.711463Z","shell.execute_reply":"2024-07-30T12:40:17.710638Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":1068.907748,"end_time":"2024-07-30T12:40:17.713693","exception":false,"start_time":"2024-07-30T12:22:28.805945","status":"completed"},"scrolled":true,"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004628 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004544 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e7d7607deb534419811256e0b70d1110","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/314 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004782 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004741 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004571 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004555 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004634 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21105\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21109\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002461 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21214\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004985 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21203\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004754 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004539 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004439 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002703 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006066 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004586 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004455 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004736 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004636 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004582 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004717 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004866 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004636 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004500 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004605 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004626 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004857 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004680 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004606 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004861 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004697 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20970\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004692 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20931\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20936\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21037\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21025\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004591 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004593 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004441 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004595 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004570 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004481 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004651 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004579 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004792 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006175 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005857 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21166\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004540 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21122\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004867 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21130\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21230\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004967 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21220\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004470 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004761 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005037 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005185 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002728 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005468 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002661 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004665 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004715 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004848 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004728 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004481 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004800 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004964 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004641 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004610 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004703 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004743 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004649 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004773 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002486 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004680 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004739 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004421 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004537 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006241 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005793 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004534 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004598 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004762 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20983\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004965 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20945\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20954\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004768 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21049\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004737 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21039\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004626 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21122\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004794 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21127\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004428 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21229\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004953 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21218\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004823 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004589 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004597 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004489 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005063 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004512 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004443 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004540 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004626 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004711 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004736 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004675 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004583 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004927 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004685 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004581 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002829 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004851 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004467 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002716 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002669 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21177\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004817 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21134\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21141\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006309 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21243\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004886 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21232\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004566 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004553 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004682 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004863 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004673 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004726 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20932\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002782 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20888\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20893\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004656 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20996\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20984\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004820 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21032\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004898 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20989\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21002\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21102\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005419 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21084\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004634 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004674 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004935 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21177\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003062 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21134\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004564 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21141\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002491 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21243\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21232\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004819 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004725 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004747 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004732 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004633 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004524 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21048\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004770 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21003\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004755 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21009\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002563 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21110\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21098\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006125 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21177\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005981 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21134\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004652 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21141\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21243\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21231\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004701 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004593 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004541 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21026\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20980\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20989\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004404 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21087\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21079\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004573 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004453 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004873 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005525 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004743 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004676 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004768 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004771 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004749 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004723 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004786 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004680 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004582 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004786 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004782 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004962 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004725 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004966 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004724 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004583 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004701 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004544 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006186 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21105\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21062\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21069\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004651 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21172\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004860 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21159\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21163\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21118\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004542 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21125\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004418 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21228\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21216\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004842 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004904 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002865 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004635 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004586 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004506 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004711 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004835 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004795 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004602 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004570 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004828 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004891 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20976\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004798 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20933\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004858 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20941\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004713 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21037\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21024\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004793 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004542 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004667 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004866 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21157\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21114\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004779 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21121\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21221\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006429 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21210\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005868 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004812 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21158\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004823 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21117\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004785 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21122\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004992 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21224\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21211\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004651 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004552 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002605 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004455 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21176\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21133\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004572 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21141\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004669 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21242\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21231\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004870 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004882 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004755 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004888 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004801 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21047\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21003\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004803 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21011\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21114\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004739 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21097\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002737 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004606 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004532 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004722 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004610 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004789 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004736 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004669 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004644 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004796 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006190 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005817 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004452 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004754 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004706 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004586 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004398 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004739 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002633 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004771 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006566 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004773 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004577 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004555 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004803 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21015\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20976\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20979\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004761 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21086\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005024 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21072\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004572 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004534 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007106 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004805 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004899 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004946 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004795 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002626 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004737 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004782 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004901 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004697 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21102\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004698 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21060\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21069\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003585 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21169\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002713 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21158\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004544 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004587 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004554 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006791 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004630 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21170\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21127\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004654 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004519 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004740 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004907 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004788 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002629 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004765 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004630 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002726 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004564 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005828 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004492 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004846 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004891 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005118 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004784 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004725 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004812 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21000\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005786 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20961\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004687 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20963\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004632 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21065\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004761 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21056\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004711 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004568 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004579 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004480 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004569 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004871 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004524 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004604 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004979 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21105\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21060\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004628 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21063\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21167\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21154\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004742 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006143 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21123\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002602 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21128\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004828 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21230\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004776 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21217\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003006 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004619 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004514 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002671 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004768 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005471 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004697 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004566 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21094\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21049\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21056\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004450 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21157\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21146\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004804 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004653 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002608 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004787 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004580 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004702 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004740 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004549 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004458 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004665 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004722 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004771 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004800 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004663 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004744 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002808 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004821 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007224 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006231 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004774 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004682 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004522 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004784 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004827 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004767 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004775 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004539 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004554 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002458 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004775 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004863 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004770 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004910 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21110\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004696 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21070\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002571 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21080\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004676 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21178\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004776 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004740 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004583 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004676 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004615 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004652 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004630 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004829 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004903 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20981\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002929 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20942\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004979 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20945\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21046\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21035\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004612 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21127\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21083\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21090\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004507 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21191\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006044 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21179\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006854 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21167\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004893 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21126\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004789 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21130\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21232\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002917 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21219\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004614 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004572 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004732 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005245 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21155\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004823 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21114\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004718 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21117\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21219\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004713 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21207\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004795 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004589 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004687 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004469 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004812 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004713 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002752 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21104\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004753 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21108\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004649 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21210\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004903 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21201\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004675 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004571 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004505 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004639 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004575 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21046\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21000\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004551 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21009\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004722 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21111\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004602 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21100\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004739 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004448 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004917 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004575 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004465 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004747 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21109\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006109 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21071\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005881 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21079\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21177\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004682 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004717 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004656 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004908 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002702 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004427 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004784 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004726 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004783 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004524 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004831 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004612 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004744 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004443 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004772 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004681 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004554 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004426 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004653 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004817 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004649 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005406 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004550 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004674 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004515 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004811 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004571 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004587 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004474 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004640 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004918 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006102 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006139 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004702 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004644 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004753 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20934\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20891\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20896\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20997\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004798 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20984\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004632 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004655 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004474 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004658 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004711 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004682 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004521 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004656 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004864 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004610 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21169\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004596 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21124\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002533 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21133\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004504 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004691 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21221\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004776 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004763 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002560 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004978 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004651 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004675 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004619 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005430 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004729 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006006 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005998 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004602 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004966 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004574 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21171\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21128\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004746 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21135\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21226\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004725 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21149\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004878 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21106\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21112\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21214\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004833 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21202\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004803 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21157\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004788 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21114\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004806 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21119\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004872 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21221\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004798 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21211\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004814 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20979\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20934\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20945\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004711 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21039\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004871 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21029\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004656 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004605 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004428 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004791 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002666 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004781 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004609 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004709 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004750 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006218 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005632 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004678 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004791 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004790 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21121\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004919 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21128\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21231\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004725 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21218\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004823 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004750 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004790 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004635 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004969 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004821 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004709 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004719 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004717 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004756 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004613 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004741 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004809 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004733 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004835 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004717 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004728 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004759 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004781 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004587 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004593 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004698 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004632 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004531 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004963 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004713 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004866 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005434 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003287 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005842 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20930\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20890\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004747 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004478 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20996\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004604 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20985\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004723 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004937 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004771 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004906 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002648 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004578 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004769 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004703 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004533 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004695 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004597 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004652 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004591 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004482 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004772 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004748 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004644 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21096\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002686 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21103\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004467 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21204\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21192\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004560 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004571 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004518 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004578 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004649 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004764 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004465 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004839 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004832 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004702 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004850 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002666 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006035 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004812 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21166\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004577 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21120\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004884 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21127\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004423 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21230\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004612 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21218\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21161\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004774 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21119\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21125\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21228\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004772 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21215\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004688 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21038\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004595 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20993\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004503 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20998\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21099\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21091\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004450 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004634 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004577 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004691 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004769 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004485 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004635 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004815 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004569 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004587 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004787 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21105\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21111\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21212\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004807 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21198\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004834 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004836 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004640 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006175 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005917 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002553 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004798 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004589 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004550 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004477 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21107\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004850 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21065\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21072\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004568 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21172\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004822 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21159\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004615 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004517 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004619 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004548 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004602 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004628 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004602 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004515 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004474 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004696 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005012 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004807 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004633 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004551 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004787 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005635 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002728 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002511 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004874 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21171\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004585 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21129\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004562 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21136\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004451 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21238\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21225\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004818 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004623 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004665 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004962 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21026\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005999 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20981\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20990\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004438 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21088\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21078\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005678 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004606 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004681 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004808 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004878 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004541 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004630 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004530 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005036 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004669 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004500 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004723 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004715 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004430 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004738 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004699 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004756 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004479 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004845 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21112\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004567 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21069\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21076\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004419 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21176\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004665 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21164\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004767 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004928 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004623 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004519 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004922 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20946\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004729 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20907\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004721 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20915\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002566 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21007\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005978 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20991\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004609 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21024\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20978\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004517 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20987\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004425 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21085\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004667 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21075\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004757 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004794 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004647 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004557 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004681 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004550 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004605 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004844 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004606 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21027\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004517 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20981\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20992\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004558 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21088\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004667 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21079\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004850 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004687 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004673 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004567 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004946 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004783 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004883 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002591 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21109\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004825 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21072\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004646 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21077\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004682 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21178\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004878 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21165\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004549 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21179\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004667 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21136\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004532 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21143\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004486 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21245\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004737 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21158\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005981 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21118\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21124\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004583 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21226\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004568 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21212\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004742 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004821 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004749 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004794 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21179\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21136\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004604 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21143\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004523 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21245\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004694 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004557 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004597 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004454 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004637 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002640 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002533 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004871 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004697 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002637 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004471 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004612 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002627 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004551 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004759 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004717 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21166\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004663 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21124\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21131\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004583 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004878 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21221\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004658 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004597 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004429 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004840 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003471 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005834 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004491 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004975 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21057\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002531 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21013\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21021\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004433 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21120\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004654 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21113\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004731 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004721 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004748 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004483 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004663 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20929\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004757 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20894\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004613 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20995\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004973 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004665 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004738 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004628 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004452 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004818 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004691 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21035\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004776 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20993\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004787 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21004\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21107\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004768 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21087\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004586 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004634 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004531 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004897 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004865 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004911 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005378 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004774 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004641 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006364 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004526 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004797 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004775 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004865 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004803 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004639 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004702 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004632 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004724 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004762 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004431 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004862 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004656 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004710 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002950 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004497 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004633 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004742 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004641 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002473 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004752 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004739 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21024\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004612 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20990\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004687 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20993\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004513 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21094\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004651 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21082\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004640 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004776 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004503 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004738 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004785 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004782 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004715 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004749 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004584 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004580 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004506 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005908 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002705 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004761 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004814 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004792 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004698 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004722 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004497 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004759 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004652 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004701 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005281 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004459 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20937\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004929 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20893\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005007 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20901\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004614 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20999\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004899 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20986\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006784 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21103\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004843 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21059\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004761 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21070\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21169\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004757 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21156\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004598 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004585 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004733 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004655 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004674 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004608 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002693 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21179\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21136\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004524 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21143\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004492 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21245\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004640 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21069\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004550 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21028\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002562 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21031\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004604 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21130\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21116\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003078 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004735 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004689 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004781 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004853 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004809 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20930\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004688 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20887\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004945 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004678 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20995\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004804 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20984\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004925 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004754 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004664 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002796 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004895 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004820 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004816 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004523 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004740 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004696 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21156\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004747 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21113\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004737 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21120\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004581 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21223\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004837 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21209\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004853 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21096\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004949 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21100\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004487 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21204\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21195\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004773 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002762 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004804 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004719 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004443 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004754 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004599 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21029\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002620 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20984\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004613 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20993\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004431 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21091\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004692 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21082\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004582 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21026\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004676 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20980\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006044 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20989\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21087\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004861 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21079\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004654 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004580 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004680 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004524 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004736 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004660 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21176\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004724 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21133\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21242\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21230\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004599 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21177\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21135\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004536 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21142\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004491 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21244\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21232\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004756 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004519 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004708 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004733 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21029\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004576 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20983\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004571 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20992\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004481 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21089\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21080\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005398 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002602 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004653 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004457 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002566 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004513 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004636 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004767 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005527 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004799 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004567 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004568 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004564 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004591 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006174 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005797 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004598 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004588 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004828 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004843 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004589 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004512 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002660 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002934 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004575 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002573 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004751 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004595 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004607 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004492 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004782 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004594 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004466 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004773 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002742 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004614 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004536 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004495 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004669 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20955\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004613 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20908\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20920\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004625 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21012\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002585 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21009\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004685 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002525 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004586 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004830 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20945\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004686 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20903\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004701 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20904\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21009\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20990\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004645 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21102\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006487 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21058\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006010 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21069\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21169\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005556 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21158\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004801 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20974\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004619 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20932\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20942\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004691 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21039\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004638 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21027\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004702 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21156\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21116\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004644 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21121\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004467 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21222\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004698 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21210\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002665 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004690 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004560 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004890 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005408 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004557 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004434 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004774 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002548 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004610 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004619 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004611 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002682 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004626 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004799 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004500 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004633 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004721 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004467 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004724 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004672 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004514 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004667 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004603 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004608 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006134 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006536 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004967 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004510 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005022 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004598 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004630 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004669 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004786 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004582 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003013 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004617 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21168\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21126\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21132\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004486 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21220\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004626 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21166\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004676 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21124\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21130\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004615 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21233\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004623 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21221\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004712 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002733 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004790 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004563 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004730 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004683 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004470 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004623 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002649 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004426 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004707 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004585 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004545 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004458 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004644 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002707 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004966 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004413 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004727 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006429 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21151\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005766 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21111\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21118\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004509 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21217\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004706 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21208\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006311 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004733 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004691 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004458 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004634 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004595 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004677 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004564 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004777 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004720 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004492 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004688 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004919 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004652 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004894 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004463 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004741 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004715 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004745 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004743 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004465 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002586 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004733 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21160\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004608 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21115\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004778 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21122\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004399 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21224\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002692 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21212\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004705 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21165\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004599 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21123\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004601 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21129\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004758 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21231\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004618 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21219\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004640 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004572 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004496 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004726 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004772 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004851 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006633 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006050 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002586 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004853 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004657 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004590 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004852 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004659 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004700 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004696 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004851 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004829 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004684 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004580 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004697 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004999 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004631 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004621 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004670 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004713 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004550 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21180\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004614 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21137\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004716 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21144\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004443 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21246\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21234\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004685 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004582 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004564 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004680 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004620 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21026\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004616 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20987\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20993\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004642 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21096\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004622 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21083\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005006 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004558 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004679 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004771 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004666 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004661 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004714 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005980 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006065 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004650 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005478 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004754 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005462 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004734 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004945 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002576 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004933 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004592 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004662 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005156 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20928\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004643 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20885\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005062 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20892\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004744 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20994\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004801 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 20982\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004824 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004653 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004838 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004833 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004760 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004627 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004704 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002666 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002739 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004585 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004641 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004568 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004792 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21183\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 220\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004566 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21140\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004671 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21147\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004512 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21249\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004668 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21237\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002668 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21181\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 219\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004624 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21138\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 217\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004600 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21145\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 187, number of negative: 2273\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002502 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 21247\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076016 -> initscore=-2.497747\n","[LightGBM] [Info] Start training from score -2.497747\n","[LightGBM] [Info] Number of positive: 188, number of negative: 2272\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004648 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 21235\n","[LightGBM] [Info] Number of data points in the train set: 2460, number of used features: 218\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.076423 -> initscore=-2.491974\n","[LightGBM] [Info] Start training from score -2.491974\n"]}],"source":["sample_df = train_processed.sample(frac=0.01, random_state=0)\n","\n","sample_df['TARGET'] = labels.loc[sample_df.index]\n","dataset = Dataset(df=sample_df, target=\"TARGET\", features=train_processed.columns)\n","\n","lofo_imp = LOFOImportance(dataset, cv=stk_fold, scoring=\"roc_auc\") # used default model because of time redundancy\n","\n","importance_df = lofo_imp.get_importance()"]},{"cell_type":"code","execution_count":32,"id":"e66b4f3a","metadata":{"_cell_guid":"edea7cd5-1776-47ab-8ee3-d2046d795d81","_uuid":"3f55eabc-0d8f-4000-bbec-da0ff5516c16","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:18.070756Z","iopub.status.busy":"2024-07-30T12:40:18.070113Z","iopub.status.idle":"2024-07-30T12:40:22.109318Z","shell.execute_reply":"2024-07-30T12:40:22.108278Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":4.203761,"end_time":"2024-07-30T12:40:22.122369","exception":false,"start_time":"2024-07-30T12:40:17.918608","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 2000x5000 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_importance(importance_df, figsize=(20, 50))"]},{"cell_type":"code","execution_count":33,"id":"9d4ebd3b","metadata":{"_cell_guid":"eb372b0e-bfd6-479a-8815-1ecf1ecbbd9b","_uuid":"f361ede7-3b7e-4356-93be-b6550d46dd13","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:22.460659Z","iopub.status.busy":"2024-07-30T12:40:22.459749Z","iopub.status.idle":"2024-07-30T12:40:22.468403Z","shell.execute_reply":"2024-07-30T12:40:22.467555Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.17875,"end_time":"2024-07-30T12:40:22.470391","exception":false,"start_time":"2024-07-30T12:40:22.291641","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["['EXT_SOURCE_2',\n"," 'LIVINGAPARTMENTS_MODE',\n"," 'NAME_HOUSING_TYPE_With parents',\n"," 'B_DAYS_CREDIT',\n"," 'FLAG_EMAIL',\n"," 'COMMONAREA_AVG',\n"," 'APARTMENTS_AVG',\n"," 'EXT_SOURCE_3',\n"," 'REG_CITY_NOT_LIVE_CITY',\n"," 'WEEKDAY_APPR_PROCESS_START_SATURDAY',\n"," 'OCCUPATION_TYPE_Cooking staff',\n"," 'BASEMENTAREA_AVG',\n"," 'REG_REGION_NOT_LIVE_REGION',\n"," 'OBS_60_CNT_SOCIAL_CIRCLE',\n"," 'NAME_FAMILY_STATUS_Widow',\n"," 'ELEVATORS_AVG',\n"," 'WEEKDAY_APPR_PROCESS_START_FRIDAY',\n"," 'YEARS_BEGINEXPLUATATION_AVG',\n"," 'NAME_TYPE_SUITE_Family',\n"," 'FLAG_PHONE',\n"," 'YEARS_BUILD_MEDI',\n"," 'CC_B_CNT_DRAWINGS_OTHER_CURRENT',\n"," 'ORGANIZATION_TYPE_Self-employed',\n"," 'LIVINGAREA_MODE',\n"," 'DEF_60_CNT_SOCIAL_CIRCLE',\n"," 'CC_B_AMT_RECIVABLE',\n"," 'LIVINGAPARTMENTS_MEDI']"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["selected_features =  importance_df[importance_df['importance_mean'] > 0.0001]['feature'].tolist()\n","selected_features"]},{"cell_type":"code","execution_count":34,"id":"32d17cec","metadata":{"_cell_guid":"cb363016-ab3d-4a99-a6da-8038745d2924","_uuid":"791680aa-50f6-4459-96c1-32941ed33bfb","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:22.80796Z","iopub.status.busy":"2024-07-30T12:40:22.807556Z","iopub.status.idle":"2024-07-30T12:40:22.881972Z","shell.execute_reply":"2024-07-30T12:40:22.881164Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.245974,"end_time":"2024-07-30T12:40:22.884318","exception":false,"start_time":"2024-07-30T12:40:22.638344","status":"completed"},"tags":[]},"outputs":[],"source":["train_with_best_features = train_processed[selected_features]\n","test_with_best_features = test_processed[selected_features]"]},{"cell_type":"code","execution_count":35,"id":"a77b030a","metadata":{"_cell_guid":"5995fa3b-9bef-4873-9d13-ea8e4a339f4c","_uuid":"4d6bcd17-77e1-475a-9e31-0cb90c56ab1f","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:23.217289Z","iopub.status.busy":"2024-07-30T12:40:23.216935Z","iopub.status.idle":"2024-07-30T12:40:23.222104Z","shell.execute_reply":"2024-07-30T12:40:23.221164Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.173834,"end_time":"2024-07-30T12:40:23.224055","exception":false,"start_time":"2024-07-30T12:40:23.050221","status":"completed"},"tags":[]},"outputs":[],"source":["processed_cat_features = train_with_best_features.select_dtypes(include=['object']).columns.tolist()\n","cat_indices = [train_with_best_features.columns.get_loc(col) for col in processed_cat_features]"]},{"cell_type":"code","execution_count":36,"id":"e4b33c27","metadata":{"_cell_guid":"91d23dc2-286a-4841-8850-1828ada9d738","_uuid":"b5c33537-b1a9-44dc-bcdb-3d721f49f1e7","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:23.560606Z","iopub.status.busy":"2024-07-30T12:40:23.559708Z","iopub.status.idle":"2024-07-30T12:40:23.584617Z","shell.execute_reply":"2024-07-30T12:40:23.583497Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.194758,"end_time":"2024-07-30T12:40:23.586571","exception":false,"start_time":"2024-07-30T12:40:23.391813","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Index([], dtype='object')\n","Index([], dtype='object')\n"]}],"source":["print(train_with_best_features.columns[train_with_best_features.isnull().any()])\n","print(test_with_best_features.columns[test_with_best_features.isnull().any()])"]},{"cell_type":"markdown","id":"8e4a08a1","metadata":{"_cell_guid":"48275d56-5524-4ade-82c4-63e60a86247d","_uuid":"dbc7aafc-add0-4548-8598-69c9167b7189","papermill":{"duration":0.16637,"end_time":"2024-07-30T12:40:23.919939","exception":false,"start_time":"2024-07-30T12:40:23.753569","status":"completed"},"tags":[]},"source":["# 6. Optuna"]},{"cell_type":"code","execution_count":37,"id":"e4a309e2","metadata":{"_cell_guid":"24c2db2e-9900-4b0c-b1a0-ac50a8f652df","_uuid":"5a76f8c6-c097-47db-a7e3-02e259f43336","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:24.255029Z","iopub.status.busy":"2024-07-30T12:40:24.254613Z","iopub.status.idle":"2024-07-30T12:40:24.337698Z","shell.execute_reply":"2024-07-30T12:40:24.336921Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.254125,"end_time":"2024-07-30T12:40:24.339763","exception":false,"start_time":"2024-07-30T12:40:24.085638","status":"completed"},"tags":[]},"outputs":[],"source":["class_weights = compute_class_weight('balanced', classes=np.unique(labels), y=labels)\n","class_weights_dict = dict(enumerate(class_weights))\n","\n","def objective(trial):\n","    \n","    param = {\n","        'iterations': trial.suggest_int('iterations', 100, 1000),\n","        'depth': trial.suggest_int('depth', 3, 10),\n","        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n","        'random_strength': trial.suggest_int('random_strength', 0, 100),\n","        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.0, 1.0),\n","        'od_type': trial.suggest_categorical('od_type', ['IncToDec', 'Iter']),\n","        'task_type' : \"GPU\", \n","        'eval_metric': 'AUC'\n","    }\n","    \n","    model = CatBoostClassifier(**param, class_weights=class_weights_dict, verbose=0)\n","    scores = cross_val_score(model, train_with_best_features, labels, cv=stk_fold, error_score='raise')\n","    return scores.mean()"]},{"cell_type":"code","execution_count":38,"id":"05402647","metadata":{"_cell_guid":"4fd7b034-2af7-4523-a95e-6155c3845399","_uuid":"7da37f02-17e6-485a-8f1c-8fac4301a6a3","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:40:24.677955Z","iopub.status.busy":"2024-07-30T12:40:24.677548Z","iopub.status.idle":"2024-07-30T12:52:41.326975Z","shell.execute_reply":"2024-07-30T12:52:41.326028Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":736.822015,"end_time":"2024-07-30T12:52:41.329669","exception":false,"start_time":"2024-07-30T12:40:24.507654","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n","Default metric period is 5 because AUC is/are not implemented for GPU\n"]}],"source":["optuna.logging.set_verbosity(optuna.logging.WARNING)\n","\n","sampler = TPESampler(seed=1)\n","study = optuna.create_study(study_name=\"catboost\", direction=\"maximize\", sampler=sampler)\n","joblib.dump(study, \"study.pkl\")\n","study.optimize(objective, n_trials=20)"]},{"cell_type":"code","execution_count":39,"id":"488328e5","metadata":{"_cell_guid":"e9da7337-0765-4a0c-8a55-98e9a05c461a","_uuid":"60ce604d-932f-4c7a-82b5-94b4203356b5","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:52:41.682402Z","iopub.status.busy":"2024-07-30T12:52:41.682039Z","iopub.status.idle":"2024-07-30T12:52:41.686235Z","shell.execute_reply":"2024-07-30T12:52:41.685303Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.182642,"end_time":"2024-07-30T12:52:41.688171","exception":false,"start_time":"2024-07-30T12:52:41.505529","status":"completed"},"tags":[]},"outputs":[],"source":["#study = joblib.load(\"study.pkl\")"]},{"cell_type":"code","execution_count":40,"id":"c8b58f10","metadata":{"_cell_guid":"7b7e6bf7-9ed4-4b00-a617-a0666bcbc255","_uuid":"dc1fcd93-cd7b-4182-916c-66eda95b7251","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:52:42.040706Z","iopub.status.busy":"2024-07-30T12:52:42.040338Z","iopub.status.idle":"2024-07-30T12:52:42.050411Z","shell.execute_reply":"2024-07-30T12:52:42.049478Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.187915,"end_time":"2024-07-30T12:52:42.052767","exception":false,"start_time":"2024-07-30T12:52:41.864852","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of finished trials:  20\n","Best trial:\n","  Value:  0.8152163694824737\n","  Params: \n","    iterations: 847\n","    depth: 10\n","    learning_rate: 0.24914758764441697\n","    random_strength: 21\n","    bagging_temperature: 0.35446866528545934\n","    od_type: IncToDec\n"]}],"source":["print(\"Number of finished trials: \", len(study.trials))\n","print(\"Best trial:\")\n","trial = study.best_trial\n","print(\"  Value: \", trial.value)\n","print(\"  Params: \")\n","for key, value in trial.params.items():\n","    print(\"    {}: {}\".format(key, value))"]},{"cell_type":"code","execution_count":41,"id":"fc31249a","metadata":{"_cell_guid":"8106a9f9-eb28-44ef-bc30-c06cb5d58b64","_uuid":"c0395989-cf0f-42de-98ce-fd55ae6e1065","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:52:42.405723Z","iopub.status.busy":"2024-07-30T12:52:42.405357Z","iopub.status.idle":"2024-07-30T12:54:30.816278Z","shell.execute_reply":"2024-07-30T12:54:30.815212Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":108.588797,"end_time":"2024-07-30T12:54:30.818836","exception":false,"start_time":"2024-07-30T12:52:42.230039","status":"completed"},"tags":[]},"outputs":[],"source":["cb_best_model = CatBoostClassifier(**trial.params, verbose=False)\n","cb_best_model.fit(train_with_best_features, labels, verbose=False) \n","y_preds = cb_best_model.predict_proba(test_with_best_features)[:, 1]"]},{"cell_type":"code","execution_count":42,"id":"6c0f2311","metadata":{"_cell_guid":"1b6f8850-894b-4dc2-ba19-080443a522ea","_uuid":"a4f8c1df-5b5c-40a8-a65a-6f99f2b57d7e","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:54:31.173092Z","iopub.status.busy":"2024-07-30T12:54:31.172729Z","iopub.status.idle":"2024-07-30T12:54:31.208003Z","shell.execute_reply":"2024-07-30T12:54:31.207205Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.214333,"end_time":"2024-07-30T12:54:31.210065","exception":false,"start_time":"2024-07-30T12:54:30.995732","status":"completed"},"tags":[]},"outputs":[],"source":["with open('catboost_model.pkl', 'wb') as f:\n","    pickle.dump(cb_best_model, f)"]},{"cell_type":"code","execution_count":43,"id":"bb50495a","metadata":{"_cell_guid":"a42c1524-4a53-4c51-b8fa-ce8ee723e2a6","_uuid":"7b63eb5c-5363-46f7-8e81-d1b80d5eb9e3","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:54:31.565353Z","iopub.status.busy":"2024-07-30T12:54:31.56496Z","iopub.status.idle":"2024-07-30T12:54:31.71258Z","shell.execute_reply":"2024-07-30T12:54:31.711737Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.327707,"end_time":"2024-07-30T12:54:31.714837","exception":false,"start_time":"2024-07-30T12:54:31.38713","status":"completed"},"tags":[]},"outputs":[],"source":["subm['TARGET'] = y_preds\n","subm.to_csv('submission_catboost.csv', index=False)"]},{"cell_type":"markdown","id":"56b62a4b","metadata":{"_cell_guid":"90ee782d-758f-4f0c-8e15-14389725ccdd","_uuid":"2dbc1c3b-e146-419f-ae56-fa2b5e559673","papermill":{"duration":0.174383,"end_time":"2024-07-30T12:54:32.065648","exception":false,"start_time":"2024-07-30T12:54:31.891265","status":"completed"},"tags":[]},"source":["# 6. Shap Values"]},{"cell_type":"code","execution_count":44,"id":"bc5f143a","metadata":{"_cell_guid":"28967877-80f8-42bb-8154-b78bce4cfadf","_uuid":"12a7e89d-155f-4264-a7df-a4eddf702364","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:54:32.456331Z","iopub.status.busy":"2024-07-30T12:54:32.455786Z","iopub.status.idle":"2024-07-30T12:57:36.642657Z","shell.execute_reply":"2024-07-30T12:57:36.641667Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":184.398409,"end_time":"2024-07-30T12:57:36.645056","exception":false,"start_time":"2024-07-30T12:54:32.246647","status":"completed"},"tags":[]},"outputs":[],"source":["explainer = shap.TreeExplainer(cb_best_model, num_iteration=cb_best_model.best_iteration_)\n","shap_values = explainer.shap_values(train_with_best_features)"]},{"cell_type":"code","execution_count":45,"id":"121a18f4","metadata":{"_cell_guid":"ec868157-cd27-4d2b-aa46-2f15379a825c","_uuid":"ac1e1ed2-dc31-4d5e-8f64-103f8db198a2","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:57:37.055689Z","iopub.status.busy":"2024-07-30T12:57:37.054832Z","iopub.status.idle":"2024-07-30T12:58:16.770851Z","shell.execute_reply":"2024-07-30T12:58:16.769941Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":40.072397,"end_time":"2024-07-30T12:58:16.951254","exception":false,"start_time":"2024-07-30T12:57:36.878857","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 800x750 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["shap.summary_plot(shap_values, train_with_best_features, max_display=15)"]},{"cell_type":"code","execution_count":46,"id":"60152b32","metadata":{"_cell_guid":"99052b3e-0a62-4dcd-be2a-bf717384db0d","_uuid":"2f1c3dd1-f521-4362-8f77-071cc76b0029","collapsed":false,"execution":{"iopub.execute_input":"2024-07-30T12:58:17.30798Z","iopub.status.busy":"2024-07-30T12:58:17.307613Z","iopub.status.idle":"2024-07-30T12:58:17.314581Z","shell.execute_reply":"2024-07-30T12:58:17.313694Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.187743,"end_time":"2024-07-30T12:58:17.316408","exception":false,"start_time":"2024-07-30T12:58:17.128665","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["\n","<div id='iI3W63K67KBFLGGUOC6K0'>\n","<div style='color: #900; text-align: center;'>\n","  <b>Visualization omitted, Javascript library not loaded!</b><br>\n","  Have you run `initjs()` in this notebook? If this notebook was from another\n","  user you must also trust this notebook (File -> Trust notebook). If you are viewing\n","  this notebook on github the Javascript has been stripped for security. If you are using\n","  JupyterLab this error is because a JupyterLab extension has not yet been written.\n","</div></div>\n"," <script>\n","   if (window.SHAP) SHAP.ReactDom.render(\n","    SHAP.React.createElement(SHAP.AdditiveForceVisualizer, {\"outNames\": [\"f(x)\"], \"baseValue\": -3.1881307637924508, \"outValue\": 1.3890851641247561, \"link\": \"identity\", \"featureNames\": [\"Feature 0\", \"Feature 1\", \"Feature 2\", \"Feature 3\", \"Feature 4\", \"Feature 5\", \"Feature 6\", \"Feature 7\", \"Feature 8\", \"Feature 9\", \"Feature 10\", \"Feature 11\", \"Feature 12\", \"Feature 13\", \"Feature 14\", \"Feature 15\", \"Feature 16\", \"Feature 17\", \"Feature 18\", \"Feature 19\", \"Feature 20\", \"Feature 21\", \"Feature 22\", \"Feature 23\", \"Feature 24\", \"Feature 25\", \"Feature 26\"], \"features\": {\"0\": {\"effect\": 1.1292118104532793, \"value\": \"\"}, \"1\": {\"effect\": 0.10903921537136363, \"value\": \"\"}, \"2\": {\"effect\": -0.00017955090288518535, \"value\": \"\"}, \"3\": {\"effect\": 0.2086724312892778, \"value\": \"\"}, \"4\": {\"effect\": 0.02122374360604298, \"value\": \"\"}, \"5\": {\"effect\": -0.06335065720209637, \"value\": \"\"}, \"6\": {\"effect\": 0.23292303209987628, \"value\": \"\"}, \"7\": {\"effect\": 1.3932963331584851, \"value\": \"\"}, \"8\": {\"effect\": -0.03148146835803291, \"value\": \"\"}, \"9\": {\"effect\": -0.0068949099782179245, \"value\": \"\"}, \"10\": {\"effect\": 0.007992948306162507, \"value\": \"\"}, \"11\": {\"effect\": 0.0034952262250312156, \"value\": \"\"}, \"12\": {\"effect\": 0.011236548372641833, \"value\": \"\"}, \"13\": {\"effect\": 0.255457916802478, \"value\": \"\"}, \"14\": {\"effect\": 0.03386042154874569, \"value\": \"\"}, \"15\": {\"effect\": 0.05797081646902214, \"value\": \"\"}, \"16\": {\"effect\": 0.05469324049963489, \"value\": \"\"}, \"17\": {\"effect\": 0.3537184714631982, \"value\": \"\"}, \"18\": {\"effect\": 0.04144323705682714, \"value\": \"\"}, \"19\": {\"effect\": -0.1495844385837074, \"value\": \"\"}, \"20\": {\"effect\": -0.030293707447321655, \"value\": \"\"}, \"21\": {\"effect\": 0.01009936719673259, \"value\": \"\"}, \"22\": {\"effect\": -0.03391564205066109, \"value\": \"\"}, \"23\": {\"effect\": 0.2358046133257516, \"value\": \"\"}, \"24\": {\"effect\": 0.6392331061994488, \"value\": \"\"}, \"25\": {\"effect\": 0.020781533914722452, \"value\": \"\"}, \"26\": {\"effect\": 0.07276228908140635, \"value\": \"\"}}, \"plot_cmap\": \"RdBu\", \"labelMargin\": 20}),\n","    document.getElementById('iI3W63K67KBFLGGUOC6K0')\n","  );\n","</script>"],"text/plain":["<shap.plots._force.AdditiveForceVisualizer at 0x79cd51d1ea40>"]},"execution_count":46,"metadata":{},"output_type":"execute_result"}],"source":["shap.plots.force(explainer.expected_value, shap_values[0, ...])"]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"databundleVersionId":860599,"sourceId":9120,"sourceType":"competition"}],"dockerImageVersionId":30698,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":2849.571243,"end_time":"2024-07-30T12:58:19.622851","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-30T12:10:50.051608","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"1e01ec84c8f649f28e89a6b783273c92":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"89de7edde20e42249320a846ea6f657c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9128b231ade247e1bf39f5255c011ef9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_89de7edde20e42249320a846ea6f657c","max":314.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_1e01ec84c8f649f28e89a6b783273c92","value":314.0}},"919b792e17f548589c636f1deb5f2685":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"acc94cacd3f24ec2be0ae6b6e4e90f75":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_db86983e341f4593a48f53d97cb61b3b","placeholder":"​","style":"IPY_MODEL_ee49c5d61f3d4cfb846664cbf4480f45","value":" 314/314 [17:45&lt;00:00,  3.41s/it]"}},"cfb3292240a3416b89ce00a1afd54bd1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"db86983e341f4593a48f53d97cb61b3b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e0c3654cdeec4faf9c64397c69a44e6e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e7d7607deb534419811256e0b70d1110":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f73c6e9a0b6248f299f0ed96231a39da","IPY_MODEL_9128b231ade247e1bf39f5255c011ef9","IPY_MODEL_acc94cacd3f24ec2be0ae6b6e4e90f75"],"layout":"IPY_MODEL_919b792e17f548589c636f1deb5f2685"}},"ee49c5d61f3d4cfb846664cbf4480f45":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f73c6e9a0b6248f299f0ed96231a39da":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e0c3654cdeec4faf9c64397c69a44e6e","placeholder":"​","style":"IPY_MODEL_cfb3292240a3416b89ce00a1afd54bd1","value":"100%"}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}